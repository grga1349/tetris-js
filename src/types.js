// Tetrominos

// Shape of tetromino is defined by setting bits on 16 positions of tetromino

// Binary	Hexadecimal
// 0000	  0
// 0001	  1
// 0010	  2
// 0011	  3
// 0100	  4
// 0101	  5
// 0110	  6
// 0111	  7
// 1000	  8
// 1001	  9
// 1010	  A
// 1011	  B
// 1100	  C
// 1101	  D
// 1110	  E
// 1111	  F

// We can define every postition with 0 or 1 and every row
// with hexadecimal digit

// 01 02 03 04
// 05 06 07 08
// 09 10 11 12
// 13 14 15 16

// We will define all 7 tetrominos as fixed size u16 array
// with 4 members for each to cover all rotations
// Formula: type * rotations[always 4] + rotation

// Number of cases: 7 * 4 = 28

const types = new Uint16Array(28)

//////////////////////////////////////////////////////////
//                      I Shape                         //
//////////////////////////////////////////////////////////

// Type: 0

// Rotation: 0
//
// 0 1 0 0  = 4
// 0 1 0 0  = 4
// 0 1 0 0  = 4
// 0 1 0 0  = 4

// 0 * 4 + 0 = 0
types[0] = 0x4444

// Rotation: 1
//
// 0 0 0 0  = 0
// 1 1 1 1  = F
// 0 0 0 0  = 0
// 0 0 0 0  = 0

// 0 * 4 + 1 = 1
types[1] = 0x0F00

// Rotation: 2
//
// 0 0 1 0  = 2
// 0 0 1 0  = 2
// 0 0 1 0  = 2
// 0 0 1 0  = 2

// 0 * 4 + 2 = 2
types[2] = 0x2222

// Rotation: 3
//
// 0 0 0 0  = 0
// 0 0 0 0  = 0
// 1 1 1 1  = F
// 0 0 0 0  = 0

// 0 * 4 + 3 = 3
types[3] = 0x00F0

//////////////////////////////////////////////////////////
//                      J Shape                         //
//////////////////////////////////////////////////////////

// Type: 1

// Rotation: 0
//
// 0 1 0 0  = 4
// 0 1 0 0  = 4
// 1 1 0 0  = C
// 0 0 0 0  = 0

// 1 * 4 + 0 = 4
types[4] = 0x44C0

// Rotation: 1
//
// 1 0 0 0  = 8
// 1 1 1 0  = E
// 0 0 0 0  = 0
// 0 0 0 0  = 0

// 1 * 4 + 1 = 5
types[5] = 0x8E00

// Rotation: 2
//
// 0 1 1 0  = 6
// 0 1 0 0  = 4
// 0 1 0 0  = 4
// 0 0 0 0  = 0

// 1 * 4 + 2 = 6
types[6] = 0x6440

// Rotation: 3
//
// 0 0 0 0  = 0
// 1 1 1 0  = E
// 0 0 1 0  = 2
// 0 0 0 0  = 0

// 1 * 4 + 3 = 7
types[7] = 0x0E20

//////////////////////////////////////////////////////////
//                      L Shape                         //
//////////////////////////////////////////////////////////

// Type: 2

// Rotation: 0
//
// 0 1 0 0  = 4
// 0 1 0 0  = 4
// 0 1 1 0  = 6
// 0 0 0 0  = 0

// 2 * 4 + 0 = 8
types[8] = 0x4460

// Rotation: 1
//
// 0 0 0 0  = 0
// 1 1 1 0  = E
// 1 0 0 0  = 8
// 0 0 0 0  = 0

// 2 * 4 + 1 = 9
types[9] = 0x0E80

// Rotation: 2
//
// 1 1 0 0  = C
// 0 1 0 0  = 4
// 0 1 0 0  = 4
// 0 0 0 0  = 0

// 2 * 4 + 2 = 10
types[10] = 0xC440

// Rotation: 3
//
// 0 0 1 0  = 2
// 1 1 1 0  = E
// 0 0 0 0  = 0
// 0 0 0 0  = 0

// 2 * 4 + 3 = 11
types[11] = 0x2E00

//////////////////////////////////////////////////////////
//                      O Shape                         //
//////////////////////////////////////////////////////////

// Type: 3

// Rotation: 0
//
// 1 1 0 0  = C
// 1 1 0 0  = C
// 0 0 0 0  = 0
// 0 0 0 0  = 0

// 3 * 4 + 0 = 12
types[12] = 0xCC00

// Rotation: 1
//
// 1 1 0 0  = C
// 1 1 0 0  = C
// 0 0 0 0  = 0
// 0 0 0 0  = 0

// 3 * 4 + 1 = 13
types[13] = 0xCC00

// Rotation: 2
//
// 1 1 0 0  = C
// 1 1 0 0  = C
// 0 0 0 0  = 0
// 0 0 0 0  = 0

// 3 * 4 + 2 = 14
types[14] = 0xCC00

// Rotation: 3
//
// 1 1 0 0  = C
// 1 1 0 0  = C
// 0 0 0 0  = 0
// 0 0 0 0  = 0

// 3 * 4 + 3 = 15
types[15] = 0xCC00

//////////////////////////////////////////////////////////
//                      S Shape                         //
//////////////////////////////////////////////////////////

// Type: 4

// Rotation: 0
//
// 0 0 0 0  = 0
// 0 1 1 0  = 6
// 1 1 0 0  = C
// 0 0 0 0  = 0

// 4 * 4 + 0 = 16
types[16] = 0x06C0

// Rotation: 1
//
// 1 0 0 0  = 8
// 1 1 0 0  = C
// 0 1 0 0  = 4
// 0 0 0 0  = 0

// 4 * 4 + 1 = 17
types[17] = 0x8C40

// Rotation: 2
//
// 0 1 1 0  = 6
// 1 1 0 0  = C
// 0 0 0 0  = 0
// 0 0 0 0  = 0

// 4 * 4 + 2 = 18
types[18] = 0x6C00

// Rotation: 3
//
// 0 1 0 0  = 4
// 0 1 1 0  = 6
// 0 0 1 0  = 2
// 0 0 0 0  = 0

// 4 * 4 + 3 = 19
types[19] = 0x4620

//////////////////////////////////////////////////////////
//                      T Shape                         //
//////////////////////////////////////////////////////////

// Type: 5

// Rotation: 0
//
// 0 0 0 0  = 0
// 1 1 1 0  = E
// 0 1 0 0  = 4
// 0 0 0 0  = 0

// 5 * 4 + 0 = 20
types[20] = 0x0E40

// Rotation: 1
//
// 0 1 0 0  = 4
// 1 1 0 0  = C
// 0 1 0 0  = 4
// 0 0 0 0  = 0

// 5 * 4 + 1 = 21
types[21] = 0x4C4

// Rotation: 2
//
// 0 1 0 0  = 4
// 1 1 1 0  = E
// 0 0 0 0  = 0
// 0 0 0 0  = 0

// 5 * 4 + 2 = 22
types[22] = 0x4E00

// Rotation: 3
//
// 0 1 0 0  = 4
// 0 1 1 0  = 6
// 0 1 0 0  = 4
// 0 0 0 0  = 0

// 5 * 4 + 3 = 23
types[23] = 0x4640

//////////////////////////////////////////////////////////
//                      Z Shape                         //
//////////////////////////////////////////////////////////

// Type: 6

// Rotation: 0
//
// 0 0 0 0  = 0
// 1 1 0 0  = C
// 0 1 1 0  = 6
// 0 0 0 0  = 0

// 6 * 4 + 0 = 24
types[24] = 0x0C60

// Rotation: 1
//
// 0 1 0 0  = 4
// 1 1 0 0  = C
// 1 0 0 0  = 8
// 0 0 0 0  = 0

// 6 * 4 + 1 = 25
types[25] = 0x4C80

// Rotation: 2
//
// 1 1 0 0  = C
// 0 1 1 0  = 6
// 0 0 0 0  = 0
// 0 0 0 0  = 0

// 6 * 4 + 2 = 26
types[26] = 0xC600

// Rotation: 3
//
// 0 0 1 0  = 2
// 0 1 1 0  = 6
// 0 1 0 0  = 4
// 0 0 0 0  = 0

// 6 * 4 + 3 = 27
types[27] = 0x2640

// Function that returns type
function getType(type, rotation) {
  return types[(type * 4) + rotation]
}

export {
  getType
}
